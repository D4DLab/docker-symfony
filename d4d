#!/bin/bash

DOCKER_SCRIPT_VER=1.0.0

OS=`uname`
WORK_DIR=`pwd`

cd ${WORK_DIR}

#Added for security
chmod 700 ${WORK_DIR}/docker >/dev/null 2>&1
chmod 700 ${WORK_DIR} >/dev/null 2>&1

ENV=${WORK_DIR}/.env
ENV_DIST=${WORK_DIR}/.env.dist

if [ ! -e ${ENV} ]; then
  cp "${ENV_DIST}" "${ENV}"
fi

# Emulate ${!variable}
eval_var() {
    var=${1}
        if [ -z ${var} ]; then
            echo ""
        else
            eval newval="\$${var}"
            echo $newval
        fi
}

# Get OS version
DEBIAN_VERSION=/etc/debian_version
if [ "${OS}" = "FreeBSD" ]; then
    OS_VERSION=`uname -r | cut -d- -f1`
	  OS_FREEBSD_VERSION=`echo ${OS_VER} | cut -d. -f1`
elif [ -e ${DEBIAN_VERSION} ]; then
	  OS_DEBIAN_VERSION=`grep -m1 -o '^[^\.]*' ${DEBIAN_VERSION}`
else
    if [ -s /etc/os-release ]; then
		    OS_CENTOS_VERSION=`grep -m1 '^VERSION_ID=' /etc/os-release | cut -d. -f1 | cut -d'"' -f2`
	  else
		    OS_CENTOS_VERSION=`grep -m1 -o '[0-9]*\.[0-9]*' /etc/redhat-release | cut -d. -f1`
	  fi
fi

HIDE_CHANGES=0

getOpt() {
	#$1 is option name
	#$2 is default value

  source ${WORK_DIR}/.env

	GET_OPTION="$(eval_var $1)"
	if [ "${GET_OPTION}" = "" ]; then
		echo "$1=$2" >> ${ENV}
		GET_OPTION="${2}"
		eval `echo "${1}=${2}"`
	fi

	echo ${GET_OPTION}
}

##################################################
# Variables for bolded text
boldon="`tput -Txterm bold`"
boldoff="`tput -Txterm sgr0`"
##################################################

setOpt() {
	#$1 is option name
	#$2 is value
	READ_OPTION_NAME="`echo \"$1\" | tr '[:lower:]' '[:upper:]'`"
	READ_OPTION_VALUE="`echo \"$2\" | perl -p0 -e 's|@|\\\\@|g'`"

	VAR=`echo ${READ_OPTION_NAME} | tr "[a-z]" "[A-Z]"`
	if [ -z "$(eval_var ${VAR}_DEF)" ]; then
		echo "${READ_OPTION_NAME} is not a valid option."
		EXIT_CODE=50
		return
	fi

	VALID="no"
	for i in $(eval_var ${VAR}_SET); do
		if [ "${i}" = "${READ_OPTION_VALUE}" ] || [ "${i}" = "userinput" ]; then
			VALID="yes"
			break
		fi
	done

	if [ "${VALID}" = "no" ]; then
		echo "${READ_OPTION_VALUE} is not a valid setting for ${READ_OPTION_NAME} option."
		EXIT_CODE=51
		return
	fi
	OPT_VALUE="`grep -m1 "^${READ_OPTION_NAME}=" ${ENV} | cut -d= -f2 | perl -p0 -e 's|@|\\\\@|g'`"
	perl -pi -e "s#${READ_OPTION_NAME}=${OPT_VALUE}#${READ_OPTION_NAME}=${READ_OPTION_VALUE}#" ${ENV}
	if [ "${HIDE_CHANGES}" = "0" ]; then
		echo "Changed ${boldon}${READ_OPTION_NAME}${boldoff} option from ${boldon}${OPT_VALUE}${boldoff} to ${boldon}${READ_OPTION_VALUE}${boldoff}" | perl -p0 -e 's|\\\@|\@|g'
	fi
}

##################################################

# PHP
PHP_VERSION_SET="5.6 7.0 7.1 7.2 7.3 7.4"
PHP_VERSION_DEF="7.2"
PHP_VERSION_OPT=`getOpt PHP_VERSION ${PHP_VERSION_DEF}`

# MySQL
MYSQL_VERSION_SET="5.6 5.7 8.0"
MYSQL_VERSION_DEF="5.6"
MYSQL_VERSION_OPT=`getOpt MYSQL_VERSION ${MYSQL_VERSION_DEF}`

# Debian
DEBIAN_VERSION_SET="stretch buster"
DEBIAN_VERSION_DEF="stretch"
DEBIAN_VERSION_OPT=`getOpt DEBIAN_VERSION ${DEBIAN_VERSION_DEF}`

# Node.js version
NODE_JS_VERSION_SET="4.x 6.x 7.x 8.x 9.x 10.x 11.x 12.x 13.x"
NODE_JS_VERSION_DEF="9.x"
NODE_JS_VERSION_OPT=`getOpt NODE_JS_VERSION ${NODE_JS_VERSION_DEF}`

# Optional configuration
IONCUBE_SET="yes no"
IONCUBE_DEF="no"
IONCUBE_OPT=`getOpt IONCUBE ${IONCUBE_DEF}`
IONCUBE_DESC="ionCube is a PHP module extension that loads encrypted PHP files and speeds up webpages. It is often required for PHP-based applications."

XDEBUG_SET="yes no"
XDEBUG_DEF="no"
XDEBUG_OPT=`getOpt XDEBUG ${XDEBUG_DEF}`
XDEBUG_DESC="Xdebug - Debugger and Profiler Tool for PHP"

PROJECT_TYPE_SET="SF SF_PWA"
PROJECT_TYPE_DEF="SF"
PROJECT_TYPE_OPT=`getOpt PROJECT_TYPE ${PROJECT_TYPE_DEF}`

YARN_SET="yes no"
YARN_DEF="yes"
YARN_OPT=`getOpt YARN ${YARN_DEF}`

WKHTMLTOPDF_SET="yes no"
WKHTMLTOPDF_DEF="yes"
WKHTMLTOPDF_OPT=`getOpt WKHTMLTOPDF ${WKHTMLTOPDF_DEF}`

NGINX_CACHE_SET="yes no"
NGINX_CACHE_DEF="yes"
NGINX_CACHE_OPT=`getOpt NGINX_CACHE ${NGINX_CACHE_DEF}`

PMA_AUTO_LOGIN_SET="yes no"
PMA_AUTO_LOGIN_DEF="no"
PMA_AUTO_LOGIN_OPT=`getOpt PMA_AUTO_LOGIN ${PMA_AUTO_LOGIN_DEF}`
PMA_AUTO_LOGIN_DESC="phpMyAdmin auto login"

##################################################

# Help sections
HELP_SECTIONS="DOCKER_RUN DOCKER_MYSQL DOCKER_PASSWD DOCKER_D4D"
DOCKER_RUN_SET="install uninstall start stop restart exec logs prune"
DOCKER_RUN_DESC="Docker for Symfony (PHP-FPM - NGINX - MySQL)"
DOCKER_RUN_REQADD="start stop exec logs prune"
START_ADDIT=""
STOP_ADDIT=""
EXEC_ADDIT=""
LOGS_ADDIT=""

DOCKER_MYSQL_SET="mysql_dump mysql_restore"
DOCKER_MYSQL_DESC="Backup and Restore a MySQL Database"
DOCKER_MYSQL_REQADD="mysql_dump mysql_restore"
DOCKER_MYSQL_DUMP_ADDIT=""
DOCKER_MYSQL_RESTORE_ADDIT=""

DOCKER_PASSWD_SET="passwd"
DOCKER_PASSWD_DESC="Show password sensitive information"
DOCKER_PASSWD_REQADD="passwd"
PASSWD_ADDIT="show"

DOCKER_D4D_SET="opt_help set"
DOCKER_D4D_DESC="Docker related options/functions"
DOCKER_D4D_REQADD="opt_help set"
OPT_HELP_ADDIT="(full)"
SET_ADDIT="option_name value"

##################################################

# ALL SETTINGS
# SECTIONS OF OPTIONS
ALL_SECTIONS="D4D_SETTINGS NGINX_SETTINGS PHP_SETTINGS MYSQL_SETTINGS DEBIAN_SETTINGS NODE_JS_SETTINGS PMA_SETTINGS"

D4D_SETTINGS="PROJECT_TYPE YARN WKHTMLTOPDF"

NGINX_SETTINGS="NGINX_CACHE"

PHP_SETTINGS="PHP_VERSION XDEBUG IONCUBE"

MYSQL_SETTINGS="MYSQL_VERSION"

DEBIAN_SETTINGS="DEBIAN_VERSION"

NODE_JS_SETTINGS="NODE_JS_VERSION"

PMA_SETTINGS="PMA_AUTO_LOGIN"

showVersion() {
    echo "${DOCKER_SCRIPT_VER} (rev: 0001)"
}

generateHelp() {
    for section in ${HELP_SECTIONS}; do
        DESC=${section}_DESC
        echo " +-----------------------------------------------------------+"
        printf " | %-55s %-2s|\n" "$(eval_var ${DESC}):"

        BUILDSET="${section}_SET"
        BUILD_ADD_TO_OUT="${section}_REQADD"
        for setting in $(eval_var ${BUILDSET}); do
            ADDIT=""
            for i in $(eval_var ${BUILD_ADD_TO_OUT}); do
                ADDIT_VAR=`echo "${i}_ADDIT" | tr "[a-z]" "[A-Z]"`
                if [ "$i" = "${setting}" ]; then
                    ADDIT="$(eval_var ${ADDIT_VAR})"
                fi
                done
                printf " | %-55s %-2s|\n" "   $0 ${setting} ${ADDIT}"
            done
    done
}

doChecks() {
    # Prerequisites
    pwgen > /dev/null 2>&1 || { echo >&2 "pwgen not found."; exit 1; }
    docker --version > /dev/null 2>&1 || { echo >&2 "Docker not found. Please install it via https://docs.docker.com/install/"; exit 1; }
    docker-machine --version > /dev/null 2>&1 || { echo >&2 "Docker machine not found. https://docs.docker.com/machine/install-machine/"; exit 1; }
    docker-compose --version > /dev/null 2>&1 || { echo >&2 "Docker compose not found. Please install it via https://docs.docker.com/compose/install/"; exit 1; }

    if [ ! -f "${ENV}" ]; then
        if [ -f "${ENV_DIST}" ]; then
            cp "{$ENV_DIST}" "${ENV}"
        else
            echo >&2 "The ${ENV} file does not exist. Project setup will not work"
            exit 1
        fi
    fi

    # Assign user id and group id into variables
    TMP_USER_ID=`id -u`
    TMP_GROUP_ID=`id -g`

    # Always validate user id and group id before start using .env file
    sed -i 's#USER_ID=.*#'"USER_ID=${TMP_USER_ID}"'#g' ${WORK_DIR}/.env
    sed -i 's#GROUP_ID=.*#'"GROUP_ID=${TMP_USER_ID}"'#g' ${WORK_DIR}/.env
    sed -i 's#MYSQL_ROOT_PASSWORD=root#'"MYSQL_ROOT_PASSWORD=`pwgen -s 20 1`"'#g' ${WORK_DIR}/.env
    sed -i 's#MYSQL_PASSWORD=db_password#'"MYSQL_PASSWORD=`pwgen -s 20 1`"'#g' ${WORK_DIR}/.env

    # Load .env file into the current shell script
    source ${WORK_DIR}/.env

    # Ensure all folders exists
    mkdir -p ${PROJECT_PATH}
    mkdir -p ${PROJECT_PATH}/${SYMFONY_LOG_PATH}
    mkdir -p ${SYMFONY_LOG_PATH}
    mkdir -p ${COMPOSER_PATH}
    mkdir -p ${COMPOSER_PATH}/cache
    mkdir -p ${SSH_KEY_PATH}
    mkdir -p ${MYSQL_DUMP_PATH}

    # Create an SSH private and public keys if we do not have it
    if [ ! -f "${SSH_KEY_PATH}/id_rsa" ]; then
        ssh-keygen -b 4096 -t rsa -f ${SSH_KEY_PATH}/id_rsa -q -P ""
    fi

    # Create a file if it does not exist
    if [ ! -f "${SSH_KEY_PATH}/known_hosts" ]
    then
        touch ${SSH_KEY_PATH}/known_hosts
    fi

    # Ensure all folders exists
    mkdir -p ${NGINX_LOG_PATH}
    mkdir -p ${MYSQL_DATA_PATH}
    mkdir -p ${USER_CONFIG_PATH}

    # Create a file if it does not exist
    touch ${USER_CONFIG_PATH}/.bash_history

    if [ ! -f "${USER_CONFIG_PATH}/.my.cnf" ]; then
        printf "[client]\nuser=${MYSQL_USER}\npassword=${MYSQL_PASSWORD}\n" >> ${USER_CONFIG_PATH}/.my.cnf
    fi

    #
    ./config/php/build

    # phpMyAdmin configuration
     cp config/phpmyadmin/config.user.inc.php.d4d config/phpmyadmin/config.user.inc.php.tmp

     if [ "${PMA_AUTO_LOGIN}" = "yes" ]; then
         PMA_AUTH_TYPE="config"
         PMA_MYSQL_USER=${MYSQL_USER}
         PMA_MYSQL_PASSWORD=${MYSQL_PASSWORD}
     else
         PMA_AUTH_TYPE="cookie"
         PMA_MYSQL_USER=
         PMA_MYSQL_PASSWORD=
     fi

     sed -i 's#__AUTH_TYPE__#'"${PMA_AUTH_TYPE}"'#g' config/phpmyadmin/config.user.inc.php.tmp
     sed -i 's#__MYSQL_USER__#'"${PMA_MYSQL_USER}"'#g' config/phpmyadmin/config.user.inc.php.tmp
     sed -i 's#__MYSQL_PASSWORD__#'"${PMA_MYSQL_PASSWORD}"'#g' config/phpmyadmin/config.user.inc.php.tmp

     cp config/phpmyadmin/config.user.inc.php.tmp config/phpmyadmin/config.user.inc.php
     rm config/phpmyadmin/config.user.inc.php.tmp
}

doBuild() {
    docker-compose build

    # Clears the screen.
    clear
}

doBuildNginxConf() {
    source ${WORK_DIR}/.env

    cp config/nginx/project.conf.default config/nginx/project.conf.tmp

    if [ "${PROJECT_TYPE}" = "SF" ]; then
        sed -i 's#__INCLUDE__#'"/etc/nginx/d4d/sf.conf"'#g' config/nginx/project.conf.tmp
    fi

    if [ "${PROJECT_TYPE}" = "SF_PWA" ]; then
        sed -i 's#__INCLUDE__#'"/etc/nginx/d4d/pwa.conf"'#g' config/nginx/project.conf.tmp
    fi

    cp config/nginx/project.conf.tmp config/nginx/project.conf
    rm config/nginx/project.conf.tmp

    cp config/nginx/d4d/pwa.conf.default config/nginx/d4d/pwa.conf.default.tmp
    sed -i 's#__SF_PATH__#'"${SF_PATH}"'#g' config/nginx/d4d/pwa.conf.default.tmp
    sed -i 's#__SYMFONY_FRONT_CONTROLLER__#'"${SYMFONY_FRONT_CONTROLLER}"'#g' config/nginx/d4d/pwa.conf.default.tmp
    cp config/nginx/d4d/pwa.conf.default.tmp config/nginx/d4d/pwa.conf
    rm config/nginx/d4d/pwa.conf.default.tmp

    cp config/nginx/d4d/sf.conf.default config/nginx/d4d/sf.conf.default.tmp
    sed -i 's#__SYMFONY_FRONT_CONTROLLER__#'"${SYMFONY_FRONT_CONTROLLER}"'#g' config/nginx/d4d/sf.conf.default.tmp
    cp config/nginx/d4d/sf.conf.default.tmp config/nginx/d4d/sf.conf
    rm config/nginx/d4d/sf.conf.default.tmp

    NGINX_INCLUDE_CACHE=""

    if [ "${NGINX_CACHE}" = "yes" ]; then
        NGINX_INCLUDE_CACHE="include /etc/nginx/d4d/cache.conf;"
    fi

    sed -i 's#__INCLUDE_CACHE__#'"${NGINX_INCLUDE_CACHE}"'#g' config/nginx/project.conf
}

doBuildMySQLConf() {
    source ${WORK_DIR}/.env

    cp config/mysql/d4d.cnf.d4d config/mysql/d4d.cnf.tmp
    sed -i 's#__MYSQL_MAX_ALLOWED_PACKET__#'"${MYSQL_MAX_ALLOWED_PACKET}"'#g' config/mysql/d4d.cnf.tmp
    sed -i 's#__MYSQL_INNODB_LOG_FILE_SIZE__#'"${MYSQL_INNODB_LOG_FILE_SIZE}"'#g' config/mysql/d4d.cnf.tmp
    sed -i 's#__MYSQL_WAIT_TIMEOUT__#'"${MYSQL_WAIT_TIMEOUT}"'#g' config/mysql/d4d.cnf.tmp
    cp config/mysql/d4d.cnf.tmp config/mysql/d4d.cnf

    rm config/mysql/d4d.cnf.tmp
}

doCheckPackage() {
    # $1 package name

    which $1 > /dev/null 2>&1
    if [ $? != 0 ]; then
        case "$1" in
            pwgen)
                if [ ${OS} = "FreeBSD" ]; then
            		    pkg install $1
                elif [ -e ${DEBIAN_VERSION} ]; then
                    apt-get install $1
                else
                    if [ ${OS_CENTOS_VERSION} = "7" ]; then
                        wget http://download-ib01.fedoraproject.org/pub/epel/7/x86_64/Packages/p/pwgen-2.08-1.el7.x86_64.rpm && rpm -ivh pwgen-2.08-1.el7.x86_64.rpm && rm pwgen-2.08-1.el7.x86_64.rpm
                    fi

                    if [ ${OS_CENTOS_VERSION} = "8" ]; then
                        wget https://download-ib01.fedoraproject.org/pub/epel/8/Everything/x86_64/Packages/p/pwgen-2.08-3.el8.x86_64.rpm && rpm -ivh pwgen-2.08-3.el8.x86_64.rpm && rm pwgen-2.08-3.el8.x86_64.rpm
                    fi
                fi
                ;;
            docker)
                if [ ${OS} = "FreeBSD" ]; then
            		    curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh && sudo usermod -aG docker ${USER} && rm get-docker.sh
                elif [ -e ${DEBIAN_VERSION} ]; then
                    curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh && sudo usermod -aG docker ${USER} && rm get-docker.sh
                else
                    if [ ${OS_CENTOS_VERSION} != "8" ]; then
                        curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh && sudo usermod -aG docker ${USER} && rm get-docker.sh
                    else
                        sudo dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm && curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh && sudo usermod -aG docker ${USER} && rm get-docker.sh
                    fi
                fi
                ;;
            docker-machine)
                base=https://github.com/docker/machine/releases/download/v0.16.0 && curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine && sudo install /tmp/docker-machine /usr/local/bin/docker-machine
                ;;
            docker-compose)
                sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose
                ;;
            * )
                if [ ${OS} = "FreeBSD" ]; then
			              pkg install $1
		            elif [ -e ${DEBIAN_VERSION} ]; then
			              apt-get install $1
		            else
			              yum install $1
		            fi
                ;;
        esac
    fi
}

doRemovePackage() {
    # $1 package name

    which $1 > /dev/null 2>&1
    if [ $? == 0 ]; then
        case "$1" in
            docker)
                if [ ${OS} = "FreeBSD" ]; then
			              pkg remove docker-ce docker-ce-cli
		            elif [ -e ${DEBIAN_VERSION} ]; then
			              apt-get remove docker-ce docker-ce-cli
		            else
			              yum remove docker-ce docker-ce-cli
		            fi
                ;;
            docker-machine)
                rm /usr/local/bin/docker-machine
                ;;
            docker-compose)
                rm /usr/local/bin/docker-compose
                ;;
            * )
                if [ ${OS} = "FreeBSD" ]; then
			              pkg remove $1
		            elif [ -e ${DEBIAN_VERSION} ]; then
			              apt-get remove $1
		            else
			              yum remove $1
		            fi
                ;;
        esac
    fi
}

doInstall() {
    if [ "$(id -u)" != "0" ]; then
	      echo "You must be root to execute the script. Exiting."
        exit 1
    fi

    if [ "${OS_CENTOS_VERSION}" = "6" ]; then
        echo "Unsupported distribution. Exiting."
        exit 1
    fi

    # Install PWGen
    doCheckPackage pwgen

    # Install cURL
    doCheckPackage curl

    # Install the latest Docker CE version
    doCheckPackage docker

    # Install the latest Docker Machine
    doCheckPackage docker-machine

    # Install the latest Docker Compose
    doCheckPackage docker-compose
}

doUninstall() {
    if [ "$(id -u)" != "0" ]; then
	      echo "You must be root to execute the script. Exiting."
        exit 1
    fi

    if [ "${OS_CENTOS_VERSION}" = "6" ]; then
        echo "Unsupported distribution. Exiting."
        exit 1
    fi

		# Remove PWGen
    doRemovePackage pwgen

    # Remove Docker CE
    doRemovePackage docker

    # Remove Docker Machine
    doRemovePackage docker-machine

    # Remove Docker Compose
    doRemovePackage docker-compose
}

doBeforeStart() {
    if [ "${CLEAN_NGINX_LOGS}" = "yes" ]; then
        echo > "${WORK_DIR}/var/logs/nginx/project_access.log"
        echo > "${WORK_DIR}/var/logs/nginx/project_access.log"
    fi

    if [ "${CLEAN_SF_logs}" = "yes" ]; then
        # SF 2.x
        rm -rf "${WORK_DIR}/project/app/cache/"
        rm -rf "${WORK_DIR}/project/app/logs/"

        # SF 3.x, 4.x, 5.x
        rm -rf "${WORK_DIR}/project/var/cache/"
        rm -rf "${WORK_DIR}/project/var/log/"
    fi
}

start() {
    # Start server
    echo "Starting docker containers..."
    docker-compose up -d

    # Documentation for end user
    echo ""
    echo "The following information has been set:"
    echo ""
    echo "Server IP: 127.0.0.1"
    echo "Server Hostname: ${PROJECT_DOMAIN_1}"
    echo ""
    echo "To login now, follow this link:"
    echo ""
    echo "Project URL: http://${PROJECT_DOMAIN_1}"
    echo "phpMyAdmin: http://${PROJECT_DOMAIN_1}:8080"
    echo "MailHog: http://${PROJECT_DOMAIN_1}:8025"
    echo ""
    echo "Thank you for using Docker for Symfony. Should you have any questions, don't hesitate to contact us at support@prado.lt"
}

stop() {
    docker-compose down
}

restart() {
    ./d4d stop && ./d4d start
}

dockerComposeExec() {
    # $1 command
    docker-compose exec $1 bash
}

doMysqlDump() {
    # Load .env file into the current shell script
    source ${WORK_DIR}/.env

    docker-compose exec mysql bash /tmp/db/mysql_dump.sh
}

doPrune() {
    # Remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes.
    docker system prune
}

doPasswd() {
    # $1 command
    COMMAND=$1

    if [ "${COMMAND}" = "show" ]; then
        showPasswords
    fi
}

allSettings() {
	for section in $ALL_SECTIONS; do
		DESC=${section}_DESC
		echo "------------------------------------------"
		echo "$(eval_var ${DESC})"
		echo "------------------------------------------"
		for setting in $(eval_var ${section}); do
			SETTING_NAME=`echo $setting | tr "[A-Z]" "[a-z]"`
			POSSIBLE_VALUES_VAR=${setting}_SET
			POSSIBLE_VALUES="`echo $(eval_var ${POSSIBLE_VALUES_VAR}) | awk -v OFS=", " '$1=$1'`"
			DEFAULT_VALUE=${setting}_DEF
			CURRENT_VALUE=${setting}_OPT
			echo -n "${SETTING_NAME}: ${POSSIBLE_VALUES}. Current value: $(eval_var ${CURRENT_VALUE}). Default value: $(eval_var ${DEFAULT_VALUE})."
			if [ "$1" = "full" ]; then
				DESCRIPTION="${setting}_DESC"
				echo " Description: $(eval_var ${DESCRIPTION})"
			else
				echo ""
			fi
		done
		echo ""
	done
}

mainHeader() {
    printf " +%-55s+\n" "-----------------------------------------------------------"
    printf " | %-55s %-2s|\n" "Docker for Symfony (PHP-FPM - NGINX - MySQL)"
    printf " | %-55s %-2s|\n" "Written by Vasilij Dusko"
    printf " | %-55s %-2s|\n" "Version: $(showVersion)"
    printf " +%-55s+\n" "-----------------------------------------------------------"
}

showPasswords() {
    source ${WORK_DIR}/.env

    mainHeader
    printf " +%-55s+\n" "-----------------------------------------------------------"
    printf " | %-55s %-2s|\n" "The following information has been set:"
    printf " +%-55s+\n" "-----------------------------------------------------------"
    printf " | %-55s %-2s|\n" "Server IP: 127.0.0.1"
    printf " | %-55s %-2s|\n" "Server Hostname: ${PROJECT_DOMAIN}"
    printf " +%-55s+\n" "-----------------------------------------------------------"
    printf " | %-55s %-2s|\n" "MySQL root username: root"
    printf " | %-55s %-2s|\n" "MySQL root password: ${MYSQL_ROOT_PASSWORD}"
    printf " +%-55s+\n" "-----------------------------------------------------------"
    printf " | %-55s %-2s|\n" "MySQL database name: ${MYSQL_DATABASE}"
    printf " | %-55s %-2s|\n" "MySQL username: ${MYSQL_USER}"
    printf " | %-55s %-2s|\n" "MySQL password: ${MYSQL_PASSWORD}"
    printf " +%-55s+\n" "-----------------------------------------------------------"
    printf " | %-55s %-2s|\n" "To login now, follow this link:"
    printf " +%-55s+\n" "-----------------------------------------------------------"
    printf " | %-55s %-2s|\n" "Project URL: http://${PROJECT_DOMAIN_1}"
    printf " | %-55s %-2s|\n" "phpMyAdmin: http://${PROJECT_DOMAIN_1}:8080"
    printf " | %-55s %-2s|\n" "MailHog: http://${PROJECT_DOMAIN_1}:8025"
    printf " +%-55s+\n" "-----------------------------------------------------------"
}

showHelp() {
    mainHeader
    generateHelp
    printf " +%-55s+\n" "-----------------------------------------------------------"
}

case "$1" in
    install) doInstall;
        ;;
    uninstall) doUninstall;
        ;;
    start) doChecks; doBuildNginxConf; doBuildMySQLConf; doBuild; doBeforeStart; start
        ;;
    stop) stop
        ;;
    restart) restart
        ;;
    exec) dockerComposeExec $2
        ;;
    prune) doPrune
        ;;
    mysql_dump) doMysqlDump
        ;;
    passwd) doPasswd $2
        ;;
    set) setOpt $2 $3
        ;;
    opt_help) allSettings $2
        ;;
    * ) showHelp
        exit 0
        ;;
esac
